// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Modal /> should render component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Modal
    className=""
    onClose={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <div
        aria-modal="true"
        className="component--modal"
        onKeyDown={[Function]}
        role="dialog"
      >
        <button
          className="icon--close"
          onClick={[Function]}
          title="Close"
        >
          <img
            alt=""
            src="modal-close.svg"
          />
        </button>
      </div>,
      "data-overlay": true,
      "onMouseDown": [Function],
      "onMouseUp": [Function],
      "role": "presentation",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "aria-modal": "true",
        "children": Array [
          undefined,
          <button
            className="icon--close"
            onClick={[Function]}
            title="Close"
          >
            <img
              alt=""
              src="modal-close.svg"
            />
          </button>,
        ],
        "className": "component--modal",
        "onKeyDown": [Function],
        "role": "dialog",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Array [
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              alt=""
              src="modal-close.svg"
            />,
            "className": "icon--close",
            "onClick": [Function],
            "title": "Close",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "src": "modal-close.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "button",
        },
      ],
      "type": "div",
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bdVaJa",
        "isStatic": true,
        "rules": Array [
          "
  z-index: 2;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.75);
  .component--modal {
    width: ",
          "50%",
          ";
    max-width: ",
          "320px",
          ";
    z-index: 3;
    position: absolute;
    top: 50%;
    left: 50%;
    right: auto;
    bottom: auto;
    margin-right: -50%;
    padding: 4rem 2rem 2rem 2rem;
    transform: translate(-50%, -50%);
    background-color: ",
          "#ecf0f1",
          ";
    border-radius: 4px;
    .icon--close {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      width: 1.5rem;
      height: 1.5rem;
      cursor: pointer;
      background-color: transparent;
      transition: background-color 0.1s ease-in-out;
      outline: 0;
      border-radius: 4px;
      img {
        display: block;
        width: 100%;
        height: 100%;
      }
      &:focus {
        background-color: ",
          "#38EF7D",
          ";
      }
    }
  }
",
        ],
      },
      "displayName": "styled.div",
      "render": [Function],
      "styledComponentId": "sc-bdVaJa",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <div
          aria-modal="true"
          className="component--modal"
          onKeyDown={[Function]}
          role="dialog"
        >
          <button
            className="icon--close"
            onClick={[Function]}
            title="Close"
          >
            <img
              alt=""
              src="modal-close.svg"
            />
          </button>
        </div>,
        "data-overlay": true,
        "onMouseDown": [Function],
        "onMouseUp": [Function],
        "role": "presentation",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-modal": "true",
          "children": Array [
            undefined,
            <button
              className="icon--close"
              onClick={[Function]}
              title="Close"
            >
              <img
                alt=""
                src="modal-close.svg"
              />
            </button>,
          ],
          "className": "component--modal",
          "onKeyDown": [Function],
          "role": "dialog",
        },
        "ref": Object {
          "current": null,
        },
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                alt=""
                src="modal-close.svg"
              />,
              "className": "icon--close",
              "onClick": [Function],
              "title": "Close",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "",
                "src": "modal-close.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
        ],
        "type": "div",
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bdVaJa",
          "isStatic": true,
          "rules": Array [
            "
  z-index: 2;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.75);
  .component--modal {
    width: ",
            "50%",
            ";
    max-width: ",
            "320px",
            ";
    z-index: 3;
    position: absolute;
    top: 50%;
    left: 50%;
    right: auto;
    bottom: auto;
    margin-right: -50%;
    padding: 4rem 2rem 2rem 2rem;
    transform: translate(-50%, -50%);
    background-color: ",
            "#ecf0f1",
            ";
    border-radius: 4px;
    .icon--close {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      width: 1.5rem;
      height: 1.5rem;
      cursor: pointer;
      background-color: transparent;
      transition: background-color 0.1s ease-in-out;
      outline: 0;
      border-radius: 4px;
      img {
        display: block;
        width: 100%;
        height: 100%;
      }
      &:focus {
        background-color: ",
            "#38EF7D",
            ";
      }
    }
  }
",
          ],
        },
        "displayName": "styled.div",
        "render": [Function],
        "styledComponentId": "sc-bdVaJa",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
